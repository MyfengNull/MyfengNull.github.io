<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Feng Blog]]></title>
  <link href="http://myfengnull.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://myfengnull.github.io/"/>
  <updated>2016-08-26T19:10:28+08:00</updated>
  <id>http://myfengnull.github.io/</id>
  <author>
    <name><![CDATA[YangShirong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[实现扫描二维码和生成带logo的二维码]]></title>
    <link href="http://myfengnull.github.io/blog/2015/07/15/android13/"/>
    <updated>2015-07-15T19:44:46+08:00</updated>
    <id>http://myfengnull.github.io/blog/2015/07/15/android13</id>
    <content type="html"><![CDATA[<h1>欢迎来到风的博客</h1>

<p>今天讲的是如何引用google的zxing库实现扫描二维码和生成带logo的二维码,源码库可以从github上下载[<a href="https://github.com/zxing/zxing">https://github.com/zxing/zxing</a>];在文章结尾也会分享我的Demo</p>

<h5>扫描二维码</h5>

<pre><code>  Intent startScan = new Intent(MainActivity.this,CaptureActivity.class);
      startActivity(startScan);
</code></pre>

<h5>生成不带logo的二维码</h5>

<pre><code>  String in = input.getText().toString();
                if (in.equals("")) {
                    Toast.makeText(MainActivity.this, "请输入文本", Toast.LENGTH_SHORT).show();
                }
                try {

//TODO 也可以生成二维码
//                    Bitmap qrcod = EncodingHandler.createQRCode(in, 400);
//                    img.setImageBitmap(qrcod);
                    // 写入数据信息到图片
                    int width = 400, height = 400;
                    QRCodeWriter writer = new QRCodeWriter();

                    //把内容编码
                    BitMatrix matrix = writer.encode(in, BarcodeFormat.QR_CODE, width, height);
                    int ms[] = new int[width * height];
                    //变换赋值
                    for (int y = 0; y &lt; height; y++) {
                        for (int x = 0; x &lt; width; x++) {
                            if (matrix.get(x, y)) {
                                //黑点
                                ms[y * width + x] = 0xff000000;
                            } else {
                                //白点
                                ms[y * width + x] = 0xffffffff;
                            }
                        }
                    }
                    //TODO 缓存
                    Bitmap image = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
                    image.setPixels(ms, 0, width, 0, 0, width, height);
                    //TODO 展示图片
                    img.setImageBitmap(image);
                    FileOutputStream out = new FileOutputStream("/sdcard/code2.png");
                    //TODO 压缩
                    image.compress(Bitmap.CompressFormat.PNG, 100, out);
                    Log.e("MMMM", "创建成功");
                } catch (WriterException e) {
                    e.printStackTrace();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            }
</code></pre>

<h5>带logo的二维码</h5>

<pre><code> //Todo 带logo的二维码
    @Override
    public void onClick(View v) {

        String in = input.getText().toString();
        if (in.equals("")) {
            Toast.makeText(MainActivity.this, "请输入文本", Toast.LENGTH_SHORT).show();
        }
        try {
            // 写入数据信息到图片
            int width = 400, height = 400;
            QRCodeWriter writer = new QRCodeWriter();
            //把内容编码
            BitMatrix matrix = writer.encode(in, BarcodeFormat.QR_CODE, width, height);
            int ms[] = new int[width * height];
            //变换赋值
            for (int y = 0; y &lt; height; y++) {
                for (int x = 0; x &lt; width; x++) {
                    if (matrix.get(x, y)) {
                        //黑点
                        ms[y * width + x] = 0xff000000;
                    } else {
                        //白点
                        ms[y * width + x] = 0xffffffff;
                    }

                }

            }
            //TODO 缓存
            Bitmap image = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
            image.setPixels(ms, 0, width, 0, 0, width, height);
            //logo地址
            Bitmap logo = BitmapFactory.decodeFile("/sdcard/gur03.png");
            image = insertLogo(image, logo);
            //TODO 展示图片
            img.setImageBitmap(image);
            //存储生成的二维码地址
            FileOutputStream out = new FileOutputStream("/sdcard/code2.png");
            //TODO 压缩
            image.compress(Bitmap.CompressFormat.PNG, 100, out);
            Log.e("MMMM", "创建成功");

        } catch (WriterException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    public Bitmap insertLogo(Bitmap src, Bitmap logo) {
        // 获取到两张图片的宽高
        int width = src.getWidth();
        int height = src.getHeight();
        int gwidth = logo.getWidth();
        int gheight = logo.getHeight();
        // 大小图片的比例
        float scale = width * 1.0f / 5 / gwidth;
        // 工作缓冲区
        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
        // 获取缓冲区的画布
        Canvas ca = new Canvas(bitmap);
        // 话大图片
        ca.drawBitmap(src, 0, 0, null);
        ca.scale(scale, scale, width / 2, height / 2);
        // 话小图片
        ca.drawBitmap(logo, (width - gwidth) / 2, (height - gheight) / 2, null);
        // 保存所画内容
        ca.save(Canvas.ALL_SAVE_FLAG);
        // 还原画布
        ca.restore();
        return bitmap;
    }
</code></pre>

<p>注意利用画布将图片覆盖在生成的二维码上,图片是30*30的,
原理是二维码中间有可以忽略的阴影
app引用BarCodeTest类库
Demo下载地址:<a href="https://github.com/MyfengNull/QrCode">https://github.com/MyfengNull/QrCode</a></p>

<blockquote><p>本文原创下载请注明出处</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现左右点击图片预览]]></title>
    <link href="http://myfengnull.github.io/blog/2015/06/15/android9/"/>
    <updated>2015-06-15T16:59:34+08:00</updated>
    <id>http://myfengnull.github.io/blog/2015/06/15/android9</id>
    <content type="html"><![CDATA[<h1>欢迎来到风的博客</h1>

<h3>实现左右点击图片预览</h3>

<pre><code>public class MainActivity extends Activity {
    private ImageView iv;
    int img_[] = new int[] { R.drawable.img_1, R.drawable.img_2,
            R.drawable.img_3, R.drawable.img_4, R.drawable.img_5,
            R.drawable.img_6, R.drawable.img_7, R.drawable.img_8,
            R.drawable.img_9, };
    int count = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final int width = this.getWindowManager().getDefaultDisplay()
                .getWidth();
        iv = (ImageView) findViewById(R.id.imageView1);
        iv.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                ImageView view = (ImageView) v;
                int x = (int) event.getX();
                if (x &gt;= (width / 2)) {
                    if (count == 8) {
                        count = -1;
                    }
                    view.setImageResource(img_[++count]);
                } else {
                    if (x &lt; (width / 2)) {
                        if (count == 0) {
                            count = 9;
                        }
                        view.setImageResource(img_[--count]);
                    }
                }
                return false;
            }
        });

    }

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[判断sdCard是否挂载]]></title>
    <link href="http://myfengnull.github.io/blog/2015/06/02/android8/"/>
    <updated>2015-06-02T16:54:58+08:00</updated>
    <id>http://myfengnull.github.io/blog/2015/06/02/android8</id>
    <content type="html"><![CDATA[<h1>欢迎来到风的博客</h1>

<h3>判断sdCard是否挂载</h3>

<pre><code>public class FileUtils {

    /**
     * 判断sdCard是否挂载
     * @return
     */
    public static boolean isConnSdCard(){
        if(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)){
            return true;
        }
        return false;
    }
    /**
     * 将图片的字节数组保存到  sd卡上
     * @return
     */
    public static boolean writeToSdcard(byte[] buffer ,String imagName){
        FileOutputStream outputStream =null;

        boolean flag = false;

        String fileName = imagName.substring(imagName.lastIndexOf("/")+1);
        File file = new File(Environment.
                getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS),
                fileName);
        try {

            outputStream = new FileOutputStream(file);
            outputStream.write(buffer);
            flag = true;
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }finally{
            if(outputStream!=null){
                try {
                    outputStream.close();
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }

        return flag;

    }

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[判断是否有网络]]></title>
    <link href="http://myfengnull.github.io/blog/2015/05/08/android7/"/>
    <updated>2015-05-08T16:44:28+08:00</updated>
    <id>http://myfengnull.github.io/blog/2015/05/08/android7</id>
    <content type="html"><![CDATA[<h1>欢迎来到风的博客</h1>

<h3>Android判断是否有网络</h3>

<pre><code>public class HttpUtils {
    /**
     * 判断是否有网络
     * @param context
     * @return
     */
    public static boolean isNetWork(Context context){
        //得到网络的管理者
        ConnectivityManager manager = (ConnectivityManager) 
                context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo info = manager.getActiveNetworkInfo();

        if(info!=null){
            return true;

        }else{
            return false;
        }

    }


    /**
     * 获取数据
     * @param path
     * @return
     */
    public static byte[] getData(String path) {
        HttpClient httpClient = new DefaultHttpClient();
        HttpGet httpGet = new HttpGet(path);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            HttpResponse response = httpClient.execute(httpGet);
            if (response.getStatusLine().getStatusCode() == 200) {
                InputStream inputStream = response.getEntity().getContent();
                byte[] buffer = new byte[1024];
                int temp = 0;
                while ((temp = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, temp);
                    outputStream.flush();
                }

            }
            return outputStream.toByteArray();

        } catch (ClientProtocolException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return null;

    }

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重写listview,使其嵌套scrollview]]></title>
    <link href="http://myfengnull.github.io/blog/2015/05/06/android6/"/>
    <updated>2015-05-06T16:40:49+08:00</updated>
    <id>http://myfengnull.github.io/blog/2015/05/06/android6</id>
    <content type="html"><![CDATA[<h1>欢迎来到风的博客</h1>

<h3>重写listview,使其嵌套scrollview</h3>

<pre><code>import android.content.Context;
import android.util.AttributeSet;
import android.widget.ListView;

public class ListViewForScrollView extends ListView {
    public ListViewForScrollView(Context context) {
        super(context);
    }

    public ListViewForScrollView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public ListViewForScrollView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    /**
    * 重写该方法，达到使ListView适应ScrollView的效果
    */
    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; 2,    MeasureSpec.AT_MOST);
        super.onMeasure(widthMeasureSpec, expandSpec);
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
